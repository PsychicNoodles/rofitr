#!/usr/bin/env bash
# Copyright (C) 2019 Yusuf Aktepe <yusuf@yusufaktepe.com>

## Set defaults
# SOURCE="en"               # source language code
# TARGET="tr"               # translation language code
# ENGINE="google"           # google, yandex or bing
# LOCALE="en"               # translator language ($LANG var. by default)
# SPEAK_SOURCE="false"      # speak the source (true/false)
# SPEAK_TRANSLATION="false" # speak the translation (true/false)

## Rofi general options
# leave these empty or comment out to use system defaults:
# FONT="mono 10"
WIDTH="60"
LOCATION="2"
YOFFSET="20"

# use alternative config and theme
# CONFIG="~/.config/rofi/translate-config.rasi"
# THEME="/usr/share/rofi/themes/lb.rasi"

## Rofi required options
HIST_LINES="15" # lines to show for history mode
RES_LINES="42"  # limit output to screen height
PROMPT_TR=" translate"
PROMPT_HIST=" history"
PROMPT_DEL=" delete"
CLR_RESULT="#ebdbb2" # text color for translation
CLR1="#b8bb26"
CLR2="#1d2021"

HIST="${XDG_DATA_HOME:-~/.local/share}/rofi/rofitr_history"
mkdir -p "$(dirname "$HIST")"

help() {
cat <<EOF
# <u>Translate with defaults</u>
> <span background="$CLR1" foreground="$CLR2"><b><i>text</i></b></span>
# <u>Override default SOURCE and TARGET</u>
> <span background="$CLR1" foreground="$CLR2"><b>en:es <i>text</i></b></span>
# <u>Auto-detect SOURCE</u>
> <span background="$CLR1" foreground="$CLR2"><b>:en <i>text</i></b></span>
<s>                                             </s>
<u>Actions:</u>
<span foreground="$CLR1"><b>!e</b></span> <i>word</i> => show examples for "word"
<span foreground="$CLR1"><b>!s</b></span> <i>text</i> => speak the "text"
<span foreground="$CLR1"><b>!!</b></span>      => show last translation
<span foreground="$CLR1"><b>!!e</b></span>     => show examples for last translation
<span foreground="$CLR1"><b>!!s</b></span>     => speak last translation
<span foreground="$CLR1"><b>!</b></span>       => select and translate from history
<span foreground="$CLR1"><b>!d</b></span>      => select and remove from history
<span foreground="$CLR1"><b>!dd</b></span>     => clear history (in delete mode)
<s>                                             </s>
<u>Command line:</u>
$ rofitr :ru <i>text</i> <span foreground="$CLR1">=> </span>Translate into Russian
$ rofitr -s       <span foreground="$CLR1">=> </span>Translate from primary selection
EOF
}

rofi_cmd() {
	[ -n "$CONFIG" ] && params+=(-config "$CONFIG")
	[ -n "$THEME" ] && params+=(-theme "$THEME")
	[ -n "$WIDTH" ] && params+=(-width "$WIDTH")
	[ -n "$LOCATION" ] && params+=(-location "$LOCATION")
	[ -n "$YOFFSET" ] && params+=(-yoffset "$YOFFSET")
	[ -n "$FONT" ] && params+=(-font "$FONT")

	rofi -dmenu "${params[@]}" "$@"
}

myougiden_cmd() {
	myougiden_params+=(--tab)

	myougiden "${myougiden_params[@]}" "$@"
}

format() {
	clean="s/^[\t]$//;/^$/d;s/\&/\&amp\;/g;s/</\&lt\;/g;s/>/\&gt\;/g;/ - translation options:$/d"
	bold="s/^\(auxiliary verb\|abbreviation\|adjective\|adverb\|article\|conjunction\|contraction\|exclamation\|interjection\|noun\|particle\|prefix\|preposition\|pronoun\|suffix\|symbol\|verb\)$/<b>&<\/b>/"
	trl="s/^\[ .*-\&gt\;.* \]$/<span foreground=\"$CLR1\"><i>&<\/i><\/span>/"
	case "$1" in
		ex) sed -e "$clean" -e "$bold" -ne '/- examples:/,$p' | head -n $RES_LINES ;;
		sel) sed -e "$clean" -e '/ - examples:$/d' -e "$bold" -e "$trl" | sed -z 's/\n*(/ (/' | head -n $RES_LINES ;;
		*) sed -e "$clean" -e '/- examples:$/Q' -e "$bold" -e "$trl" | sed -z 's/\n*(/ (/' | head -n $RES_LINES
	esac
}

extent() {
	extents=(whole beginning word partial auto)
	extents_short=(w b o p a)
	short=$(printf '%s\n' "${extents_short[@]}" | grep -x -n "$qwer" | cut -f1 -d:)
	[ -n "${short}" ] && echo $extents[$short] || printf '%s\n' "${extents[@]}" | grep -x "$qwer"
}

esc() { sed 's|[][\\/.*^$]|\\&|g' <<< "$1" ;}

append_hist() {
	sed -i "/^$(esc "$input")$/d" "$HIST"
	printf '%s\n' "$input" >> "$HIST"
}

return_result() {
	input="$(rofi_cmd -p "$PROMPT_TR" -l 0 -mesg "<span color='$CLR_RESULT'>$result</span>")"
}

[ -n "$*" ] && input="$*" || input="$(rofi_cmd -p "$PROMPT_TR" -l 0)"

while [ -n "$input" ]; do
	case "$input" in
		"?")
			input="$(rofi_cmd -p "Usage" -l 0 -mesg "<span color='$CLR_RESULT'>$(help)</span>")"
			unset QUERY_MODE CASE_SENSITIVE REGEXP EXTENT FREQUENT ;;
		!)
			input="$(tac "$HIST" | rofi_cmd -p "$PROMPT_HIST" -l "$HIST_LINES")"
			[ "$input" = "!" ] && input="$(rofi_cmd -p "$PROMPT_TR" -l 0)"
			unset QUERY_MODE CASE_SENSITIVE REGEXP EXTENT FREQUENT ;;
		!!)
			input=$(tail -n1 "$HIST")
			unset QUERY_MODE CASE_SENSITIVE REGEXP EXTENT FREQUENT ;;
		!!e)
			input=$(printf "!e %s" "$(tail -n1 "$HIST")")
			unset QUERY_MODE CASE_SENSITIVE REGEXP EXTENT FREQUENT ;;
		!!s)
			input=$(printf "!s %s" "$(tail -n1 "$HIST")")
			unset QUERY_MODE CASE_SENSITIVE REGEXP EXTENT FREQUENT ;;
		!d)
			pattern="$(tac "$HIST" | rofi_cmd -p "$PROMPT_DEL" -l "$HIST_LINES")"
			case "$pattern" in
				!) input="$(rofi_cmd -p "$PROMPT_TR" -l 0)" ;;
				!dd) printf '' > "$HIST" && exit 0 ;;
				"") exit 0 ;;
				*) sed -i "/^$(esc "$pattern")$/d" "$HIST"
			esac
			unset QUERY_MODE CASE_SENSITIVE REGEXP EXTENT FREQUENT ;;
		!k*)
			# kanji mode
			QUERY_MODE="--kanji"
			input=$(echo "$input" | cut -d' ' -f2-) ;;
		!r*)
			# reading mode
			QUERY_MODE="--reading"
			input=$(echo "$input" | cut -d' ' -f2-) ;;
		!g*)
			# gloss/meaning mode
			QUERY_MODE="--gloss"
			input=$(echo "$input" | cut -d' ' -f2-) ;;
		!x*)
			# regexp
			REGEXP="--regexp"
			input=$(echo "$input" | cut -d' ' -f2-) ;;
		!cs*)
			# case sensitive
			CASE_SENSITIVE="--case-sensitive"
			input=$(echo "$input" | cut -d' ' -f2-) ;;
		!e:?*)
			# extent
			raw=$(echo "$input" | awk -F':' '{print $1}')
			extent=$(extent "$raw")
			[ -n "$extent" ] && EXTENT=$extent ;;
		!f*)
			# frequent
			FREQUENT="--frequent"
			input=$(echo "$input" | cut -d' ' -f2-) ;;
		!a*)
			# abbreviation meaning
			input=$(echo "$input" | cut -d' ' -f2-)
			result=$(myougiden -a "$input" | format abbrev)
			append_hist; return_result ;;
		*)
			result=$(myougiden_cmd "$input" | format)
			unset QUERY_MODE CASE_SENSITIVE REGEXP EXTENT FREQUENT
			append_hist; return_result ;;
	esac
done
